v3.0 hex words addressed
000: 24 01 00 48  # addiu, $1, $0, 0x48 // put H into $1
004: a0 01 00 30  # sb, $1, 0x30 ($0) // store H at 0x0   
008: 24 01 00 69  # addiu, $1, $0, 0x69 // put i in $1
00c: a0 01 00 31  # sb, $1, 0x31 ($0) // store i in 0x1
010: 24 01 00 20  # addiu, $1, $0, 0x20 // put ' ' in $1
014: a0 01 00 32  # sb, $1, 0x32 ($0) // store ' ' in 0x2
018: 24 01 00 4a  # addiu, $1, $0, 0x4a // put J in $1
01c: a0 01 00 33  # sb, $1, 0x33 ($0) // store J in 0x3
020: 24 01 00 6f  # addiu, $1, $0, 0x6f // put o in $1
024: a0 01 00 34  # sb, $1, 0x34 ($0) // store o in 0x4
028: 24 01 00 65  # addiu, $1, $0, 0x65 // put e in $1
02c: a0 01 00 35  # sb, $1, 0x35 ($0) // store e in 0x5
030: 24 01 00 21  # addiu, $1, $0, 0x21 // put ! in $1
034: a0 01 00 36  # sb, $1, 0x36 ($0) // store ! in 0x6
038: a0 00 00 37  # sb, $0, 0x37 ($0) // put null byte at 0x7
03c: 08 00 00 40  # j, 0x100 // jump to address 100
100: 24 04 00 30  # li, $4, 0x030 // put memory address 0x030 into $4
104: 24 05 00 60  # li, $5, 0x060 // put memory address 0x060 into $5
108: 00 80 30 25  # or, $6, $4, $0 // $6 = $4 | 0 (copy memory address of s into p in $6)
10c: 80 c3 00 00  # lb, $3, 0 ($6) // load the first byte, at address p, into $3
110: 10 60 00 05  # beq, $3, $0, 5 // branch if ch == 0; skip next 5 instructions
114: a0 a3 00 00  # sb, $3, 0 ($5) // store ch($3) at position D($5)
118: 24 a5 00 01  # addiu, $5, $5, 1 // add 1 to d
11c: 24 c6 00 01  # addiu, $6, $6, 1 // add 1 to p
120: 80 c3 00 00  # lb, $3, 0 ($6) // load the byte at p
124: 08 00 00 44  # j, 0x110 // jump to location 0x110
128: a0 05 00 00  # sb, $5, 0 ($0) // store a null byte at d
12c: 00 c4 10 22  # sub, $2, $6, $4 // compute n = P-S
130: 00 40 28 20  # add, $5, $2, $0 // $5 = n + 0 (put n into register $5)
134: 24 04 00 60  # li, $4, 0x60 // put address 0x60 into s ($4)
138: 08 00 00 80  # j, 0x200 // jump to println instructions
200: 24 07 80 00  # li, $7, 0x8000 // put 0x8000 into $7
204: 00 07 3c 00  # sll, $7, $7, 16 // shift left to most significant 16 bits
208: 34 e7 00 08  # ori, $7, $7, 0x0008 // or with 0x0008 to effectively store 0x80000008 in $7 as d
20c: 00 80 30 25  # or, $6, $4, $0 // put s into $6, call it p
210: 00 a4 40 20  # add, $8, $5, $4 // S + n 
214: 01 06 48 22  # sub, $9, $8, $6 // S+n-p
218: 19 20 00 05  # blez, $9, 5 // skip next five instructions if $9 <= 0
21c: 80 c3 00 00  # lb, $3, 0 ($6) // load in the byte at p
220: a0 e3 00 00  # sb, $3, 0 ($7) // store that byte at d
224: 24 c6 00 01  # addiu, $6, $6, 1 // p++
228: 01 06 48 22  # sub, $9, $8, $6 // S+n-p
22c: 08 00 00 86  # j, 0x218 // jump back to blez
230: 24 03 00 0a  # li, $3, 0x0a // load \n into ch 
234: a0 e3 00 00  # sb, $3, 0 ($7) // store that byte at d